var index = new LADDERS.search.index();
var titles = new LADDERS.search.document();
var d = new LADDERS.search.document();
d.add("id", 'decission_log.html');
d.add("text", "Domain Driven Design Decission Log Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices FAQ Glossary Decission Log javax transaction Transactional vs org springframework transaction annotation Transactional Spring has defined its own Transactional annotation to make Spring bean methods transactional years ago Java EE 7 has finally done the same thing and now allows CDI bean methods to be transactional in addition to EJB methods So since Java EE 7 it also defines its own Transactional annotation it obviously can’t reuse the Spring one Depending on the Spring version in use the java transaction Transactional is ignored support was added in Spring 4 Since we are using Spring 3 within this framework org springframework transaction annotation Transactional annotation will be used to indicate class method has to be transactional Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Decission Log');
titles.add("decission_log.html", "Domain Driven Design - Decission Log");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'resources.html');
d.add("text", "Domain Driven Design Resources Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices FAQ Glossary Resources DDD Sample Modularity and Domain Driven Design Domain Driven Design DDD architecture layer design for CRUD operation CQRS Clarified CQRS Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Resources');
titles.add("resources.html", "Domain Driven Design - Resources");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'dependencies.html');
d.add("text", "Domain Driven Design Project Dependencies Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices FAQ Glossary Project Dependencies compile The following is a list of compile dependencies for this project These dependencies are required to compile and run the application GroupId ArtifactId Version Type License cglib cglib 3 1 jar ASF 2 0 com google code findbugs jsr305 2 0 2 jar The Apache Software License Version 2 0 org aspectj aspectjrt 1 8 5 jar Eclipse Public License v 1 0 org springframework spring aop 3 2 13 RELEASE jar The Apache Software License Version 2 0 org springframework spring beans 3 2 13 RELEASE jar The Apache Software License Version 2 0 org springframework spring context 3 2 13 RELEASE jar The Apache Software License Version 2 0 org springframework spring tx 3 2 13 RELEASE jar The Apache Software License Version 2 0 org uniknow agiledev dbc4java 0 1 9 SNAPSHOT jar Apache License Version 2 0 runtime The following is a list of runtime dependencies for this project These dependencies are required to run the application GroupId ArtifactId Version Type License org aspectj aspectjweaver 1 8 5 jar Eclipse Public License v 1 0 test The following is a list of test dependencies for this project These dependencies are only required to compile and run unit tests for the application GroupId ArtifactId Version Type License junit junit 4 11 jar Common Public License Version 1 0 org springframework spring test 3 2 13 RELEASE jar The Apache Software License Version 2 0 Project Transitive Dependencies The following is a list of transitive dependencies for this project Transitive dependencies are the dependencies of the project dependencies compile The following is a list of compile dependencies for this project These dependencies are required to compile and run the application GroupId ArtifactId Version Type License aopalliance aopalliance 1 0 jar Public Domain com fasterxml classmate 1 0 0 jar The Apache Software License Version 2 0 commons logging commons logging 1 1 3 jar The Apache Software License Version 2 0 javax el javax el api 2 2 4 jar CDDL GPLv2 with classpath exception javax inject javax inject 1 jar The Apache Software License Version 2 0 javax validation validation api 1 1 0 Final jar The Apache Software License Version 2 0 org glassfish web javax el 2 2 4 jar CDDL GPLv2 with classpath exception org hibernate hibernate validator 5 1 3 Final jar Apache License Version 2 0 org jboss logging jboss logging 3 1 3 GA jar Apache License version 2 0 org ow2 asm asm 4 2 jar BSD org springframework spring core 3 2 13 RELEASE jar The Apache Software License Version 2 0 org springframework spring expression 3 2 13 RELEASE jar The Apache Software License Version 2 0 test The following is a list of test dependencies for this project These dependencies are only required to compile and run unit tests for the application GroupId ArtifactId Version Type License org hamcrest hamcrest core 1 3 jar New BSD License Project Dependency Graph Dependency Tree org uniknow agiledev tutorials ddd jar 0 1 9 SNAPSHOT Tutorial Domain Driven Design Description The following tutorial describes best practices for applying Domain Driven Design URL https github com UniKnow AgileDev parent ddd Project License Apache License Version 2 0 org uniknow agiledev dbc4java jar 0 1 9 SNAPSHOT compile Design By Contracts for Java Description dbc4java is a java solution for Design by Contract with seamless integration into the Spring Framework and POJOs URL https github com UniKnow AgileDev parent dbc4java Project License Apache License Version 2 0 javax inject javax inject jar 1 compile javax inject Description The javax inject API URL http code google com p atinject Project License The Apache Software License Version 2 0 org hibernate hibernate validator jar 5 1 3 Final compile Hibernate Validator Engine Description Hibernate s Bean Validation JSR 303 reference implementation URL http validator hibernate org hibernate validator Project License Apache License Version 2 0 javax validation validation api jar 1 1 0 Final compile Bean Validation API Description Bean Validation API URL http beanvalidation org Project License The Apache Software License Version 2 0 org jboss logging jboss logging jar 3 1 3 GA compile JBoss Logging 3 Description The JBoss Logging Framework URL http www jboss org Project License Apache License version 2 0 com fasterxml classmate jar 1 0 0 compile ClassMate Description Library for introspecting types with full generic information including resolving of field and method types URL http github com cowtowncoder java classmate Project License The Apache Software License Version 2 0 javax el javax el api jar 2 2 4 compile Expression Language API 2 2 Description Java net The Source for Java Technology Collaboration URL http uel java net Project License CDDL GPLv2 with classpath exception org glassfish web javax el jar 2 2 4 compile Expression Language 2 2 Implementation Description Java net The Source for Java Technology Collaboration URL http uel java net Project License CDDL GPLv2 with classpath exception org springframework spring beans jar 3 2 13 RELEASE compile Spring Beans Description Spring Beans URL https github com SpringSource spring framework Project License The Apache Software License Version 2 0 org springframework spring core jar 3 2 13 RELEASE compile Spring Core Description Spring Core URL https github com SpringSource spring framework Project License The Apache Software License Version 2 0 commons logging commons logging jar 1 1 3 compile Commons Logging Description Commons Logging is a thin adapter allowing configurable bridging to other well known logging systems URL http commons apache org proper commons logging Project License The Apache Software License Version 2 0 org springframework spring aop jar 3 2 13 RELEASE compile Spring AOP Description Spring AOP URL https github com SpringSource spring framework Project License The Apache Software License Version 2 0 aopalliance aopalliance jar 1 0 compile AOP alliance Description AOP Alliance URL http aopalliance sourceforge net Project License Public Domain org springframework spring tx jar 3 2 13 RELEASE compile Spring Transaction Description Spring Transaction URL https github com SpringSource spring framework Project License The Apache Software License Version 2 0 org aspectj aspectjrt jar 1 8 5 compile AspectJ runtime Description The runtime needed to execute a program using AspectJ URL http www aspectj org Project License Eclipse Public License v 1 0 org aspectj aspectjweaver jar 1 8 5 runtime AspectJ weaver Description The AspectJ weaver introduces advices to java classes URL http www aspectj org Project License Eclipse Public License v 1 0 cglib cglib jar 3 1 compile Code Generation Library Description Code generation library URL http cglib sourceforge net Project License ASF 2 0 org ow2 asm asm jar 4 2 compile ASM Core Description A very small and fast Java bytecode manipulation framework URL http asm objectweb org asm Project License BSD org springframework spring test jar 3 2 13 RELEASE test Spring TestContext Framework Description Spring TestContext Framework URL https github com SpringSource spring framework Project License The Apache Software License Version 2 0 org springframework spring context jar 3 2 13 RELEASE compile Spring Context Description Spring Context URL https github com SpringSource spring framework Project License The Apache Software License Version 2 0 org springframework spring expression jar 3 2 13 RELEASE compile Spring Expression Language SpEL Description Spring Expression Language SpEL URL https github com SpringSource spring framework Project License The Apache Software License Version 2 0 com google code findbugs jsr305 jar 2 0 2 compile FindBugs jsr305 Description JSR305 Annotations for Findbugs URL http findbugs sourceforge net Project License The Apache Software License Version 2 0 junit junit jar 4 11 test JUnit Description JUnit is a regression testing framework written by Erich Gamma and Kent Beck It is used by the developer who implements unit tests in Java URL http junit org Project License Common Public License Version 1 0 org hamcrest hamcrest core jar 1 3 test Hamcrest Core Description This is the core API of hamcrest matcher framework to be used by third party framework providers This includes the a foundation set of matcher implementations for common operations URL https github com hamcrest JavaHamcrest hamcrest core Project License New BSD License Licenses ASF 2 0 Code Generation Library Apache License version 2 0 JBoss Logging 3 Public Domain AOP alliance CDDL GPLv2 with classpath exception Expression Language 2 2 Implementation Expression Language API 2 2 New BSD License Hamcrest Core BSD ASM Core Eclipse Public License v 1 0 AspectJ runtime AspectJ weaver Apache License Version 2 0 Design By Contracts for Java Hibernate Validator Engine Tutorial Domain Driven Design Common Public License Version 1 0 JUnit The Apache Software License Version 2 0 Bean Validation API ClassMate Commons Logging FindBugs jsr305 Spring AOP Spring Beans Spring Context Spring Core Spring Expression Language SpEL Spring TestContext Framework Spring Transaction javax inject Dependency File Details Filename Size Entries Classes Packages Java Version Debug Information aopalliance 1 0 jar 4 47 kB 15 9 2 1 3 Yes cglib 3 1 jar 283 08 kB 243 229 7 1 2 Yes classmate 1 0 0 jar 60 28 kB 51 36 4 1 6 Yes jsr305 2 0 2 jar 31 87 kB 70 34 3 1 5 Yes commons logging 1 1 3 jar 62 05 kB 42 28 2 1 1 Yes javax el api 2 2 4 jar 38 86 kB 41 31 1 1 6 Yes javax inject 1 jar 2 50 kB 8 6 1 1 5 No validation api 1 1 0 Final jar 63 78 kB 122 106 8 1 6 Yes junit 4 11 jar 245 04 kB 266 233 28 1 5 Yes aspectjrt 1 8 5 jar 117 53 kB 148 130 11 1 5 Yes aspectjweaver 1 8 5 jar 1 86 MB 988 933 37 1 5 Yes javax el 2 2 4 jar 117 58 kB 88 74 4 1 6 Yes hamcrest core 1 3 jar 45 02 kB 52 45 3 1 5 Yes hibernate validator 5 1 3 Final jar 634 27 kB 483 410 41 1 6 Yes jboss logging 3 1 3 GA jar 57 18 kB 57 45 1 1 6 Yes asm 4 2 jar 47 90 kB 28 23 2 1 2 No spring aop 3 2 13 RELEASE jar 338 50 kB 282 252 15 1 5 Yes spring beans 3 2 13 RELEASE jar 614 48 kB 401 358 14 1 5 Yes spring context 3 2 13 RELEASE jar 868 19 kB 737 633 67 1 5 Yes spring core 3 2 13 RELEASE jar 885 41 kB 686 648 32 1 5 Yes spring expression 3 2 13 RELEASE jar 196 54 kB 140 128 6 1 5 Yes spring test 3 2 13 RELEASE jar 458 36 kB 369 335 27 1 5 Yes spring tx 3 2 13 RELEASE jar 242 55 kB 233 197 20 1 5 Yes dbc4java 0 1 9 SNAPSHOT jar 38 11 kB 22 7 1 1 6 Yes Total Size Entries Classes Packages Java Version Debug Information 24 7 32 MB 5572 4930 337 1 6 22 compile 20 compile 4 71 MB compile 3897 compile 3384 compile 242 compile 18 test 3 test 748 42 kB test 687 test 613 test 58 test 3 runtime 1 runtime 1 86 MB runtime 988 runtime 933 runtime 37 runtime 1 Dependency Repository Locations Repo ID URL Release Snapshot ow2 snapshot http repository ow2 org nexus content repositories snapshots No Yes apache snapshots http repository apache org snapshots No Yes sonatype nexus snapshots https oss sonatype org content repositories snapshots No Yes central https repo maven apache org maven2 Yes No jvnet nexus release https maven java net content repositories releases Yes Yes jvnet nexus snapshots https maven java net content repositories snapshots No Yes Repository locations for each of the Dependencies Artifact ow2 snapshot apache snapshots sonatype nexus snapshots central jvnet nexus release jvnet nexus snapshots aopalliance aopalliance jar 1 0 cglib cglib jar 3 1 com fasterxml classmate jar 1 0 0 com google code findbugs jsr305 jar 2 0 2 commons logging commons logging jar 1 1 3 javax el javax el api jar 2 2 4 javax inject javax inject jar 1 javax validation validation api jar 1 1 0 Final junit junit jar 4 11 org aspectj aspectjrt jar 1 8 5 org aspectj aspectjweaver jar 1 8 5 org glassfish web javax el jar 2 2 4 org hamcrest hamcrest core jar 1 3 org hibernate hibernate validator jar 5 1 3 Final org jboss logging jboss logging jar 3 1 3 GA org ow2 asm asm jar 4 2 org springframework spring aop jar 3 2 13 RELEASE org springframework spring beans jar 3 2 13 RELEASE org springframework spring context jar 3 2 13 RELEASE org springframework spring core jar 3 2 13 RELEASE org springframework spring expression jar 3 2 13 RELEASE org springframework spring test jar 3 2 13 RELEASE org springframework spring tx jar 3 2 13 RELEASE org uniknow agiledev dbc4java jar 0 1 9 SNAPSHOT Total ow2 snapshot apache snapshots sonatype nexus snapshots central jvnet nexus release jvnet nexus snapshots 24 compile 20 test 3 runtime 1 0 0 0 23 2 0 Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Project Dependencies');
titles.add("dependencies.html", "Domain Driven Design - Project Dependencies");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'dependency-convergence.html');
d.add("text", "Domain Driven Design Reactor Dependency Convergence Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices FAQ Glossary Reactor Dependency Convergence Legend At least one dependency has a differing version of the dependency or has SNAPSHOT dependencies Statistics Number of modules 12 Number of dependencies NOD 68 Number of unique artifacts NOA 69 Number of version conflicting artifacts NOC 0 Number of SNAPSHOT artifacts NOS 0 Convergence NOD NOA  98 % Ready for release 100 % convergence and no SNAPSHOTS  Error You do not have 100 % convergence Dependencies used in modules Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Reactor Dependency Convergence');
titles.add("dependency-convergence.html", "Domain Driven Design - Reactor Dependency Convergence");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'dependency-info.html');
d.add("text", "Domain Driven Design Dependency Information Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices FAQ Glossary Dependency Information Apache Maven <dependency> <groupId>org uniknow agiledev tutorials< groupId> <artifactId>ddd< artifactId> <version>0 1 9 SNAPSHOT< version> < dependency> Apache Buildr org uniknow agiledev tutorials ddd jar 0 1 9 SNAPSHOT Apache Ivy <dependency org org uniknow agiledev tutorials name ddd rev 0 1 9 SNAPSHOT > <artifact name ddd type jar > < dependency> Groovy Grape @Grapes @Grab group org uniknow agiledev tutorials module ddd version 0 1 9 SNAPSHOT Grails compile org uniknow agiledev tutorials ddd 0 1 9 SNAPSHOT Leiningen org uniknow agiledev tutorials ddd 0 1 9 SNAPSHOT SBT libraryDependencies org uniknow agiledev tutorials % ddd % 0 1 9 SNAPSHOT Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Dependency Information');
titles.add("dependency-info.html", "Domain Driven Design - Dependency Information");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'dependency-management.html');
d.add("text", "Domain Driven Design Project Dependency Management Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices FAQ Glossary Project Dependency Management compile The following is a list of compile dependencies in the DependencyManagement of this project These dependencies can be included in the submodules to compile and run the submodule GroupId ArtifactId Version Type License cglib cglib 3 1 jar ASF 2 0 com google code findbugs jsr305 2 0 2 jar The Apache Software License Version 2 0 javax el javax el api 2 2 4 jar CDDL GPLv2 with classpath exception javax inject javax inject 1 jar The Apache Software License Version 2 0 org aspectj aspectjrt 1 7 0 1 8 5 jar Eclipse Public License v 1 0 org glassfish web javax el 2 2 4 jar CDDL GPLv2 with classpath exception org hibernate hibernate validator 5 1 3 Final jar Apache License Version 2 0 org springframework spring aop 3 0 7 RELEASE 3 2 13 RELEASE jar The Apache Software License Version 2 0 org springframework spring aspects 3 0 7 RELEASE 3 2 13 RELEASE jar The Apache Software License Version 2 0 org springframework spring beans 3 0 7 RELEASE 3 2 13 RELEASE jar The Apache Software License Version 2 0 org springframework spring context 3 0 7 RELEASE 3 2 13 RELEASE jar The Apache Software License Version 2 0 org springframework spring core 3 0 7 RELEASE 3 2 13 RELEASE jar The Apache Software License Version 2 0 org springframework spring tx 3 0 7 RELEASE 3 2 13 RELEASE jar The Apache Software License Version 2 0 org springframework spring web 3 0 7 RELEASE 3 2 13 RELEASE jar The Apache Software License Version 2 0 org uniknow agiledev common 0 1 9 SNAPSHOT jar Apache License Version 2 0 runtime The following is a list of runtime dependencies in the DependencyManagement of this project These dependencies can be included in the submodules to run the submodule GroupId ArtifactId Version Type License org aspectj aspectjweaver 1 7 0 1 8 5 jar Eclipse Public License v 1 0 test The following is a list of test dependencies in the DependencyManagement of this project These dependencies can be included in the submodules to compile and run unit tests for the submodule GroupId ArtifactId Version Type License junit junit 4 11 jar Common Public License Version 1 0 org springframework spring test 3 0 7 RELEASE 3 2 13 RELEASE jar The Apache Software License Version 2 0 Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Project Dependency Management');
titles.add("dependency-management.html", "Domain Driven Design - Project Dependency Management");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'distribution-management.html');
d.add("text", "Domain Driven Design Project Distribution Management Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices FAQ Glossary Overview The following is the distribution management information used by this project Repository ossrhhttps oss sonatype org service local staging deploy maven2 Snapshot Repository ossrhhttps oss sonatype org content repositories snapshots Site github pages site site 0 1 9 SNAPSHOT parent ddd Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Project Distribution Management');
titles.add("distribution-management.html", "Domain Driven Design - Project Distribution Management");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'index.html');
d.add("text", "Domain Driven Design About Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices FAQ Glossary About Tutorial Domain Driven Design The following tutorial describes best practices for applying Domain Driven Design Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - About');
titles.add("index.html", "Domain Driven Design - About");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'license.html');
d.add("text", "Domain Driven Design Project License Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices FAQ Glossary Overview Typically the licenses listed for the project are that of the project itself and not of dependencies Project License Apache License Version 2 0 A business friendly OSS license Apache License Version 2 0 January 2004 http www apache org licenses TERMS AND CONDITIONS FOR USE REPRODUCTION AND DISTRIBUTION 1 Definitions License shall mean the terms and conditions for use reproduction and distribution as defined by Sections 1 through 9 of this document Licensor shall mean the copyright owner or entity authorized by the copyright owner that is granting the License Legal Entity shall mean the union of the acting entity and all other entities that control are controlled by or are under common control with that entity For the purposes of this definition control means i the power direct or indirect to cause the direction or management of such entity whether by contract or otherwise or ii ownership of fifty percent 50% or more of the outstanding shares or iii beneficial ownership of such entity You or Your shall mean an individual or Legal Entity exercising permissions granted by this License Source form shall mean the preferred form for making modifications including but not limited to software source code documentation source and configuration files Object form shall mean any form resulting from mechanical transformation or translation of a Source form including but not limited to compiled object code generated documentation and conversions to other media types Work shall mean the work of authorship whether in Source or Object form made available under the License as indicated by a copyright notice that is included in or attached to the work an example is provided in the Appendix below Derivative Works shall mean any work whether in Source or Object form that is based on or derived from the Work and for which the editorial revisions annotations elaborations or other modifications represent as a whole an original work of authorship For the purposes of this License Derivative Works shall not include works that remain separable from or merely link or bind by name to the interfaces of the Work and Derivative Works thereof Contribution shall mean any work of authorship including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner For the purposes of this definition submitted means any form of electronic verbal or written communication sent to the Licensor or its representatives including but not limited to communication on electronic mailing lists source code control systems and issue tracking systems that are managed by or on behalf of the Licensor for the purpose of discussing and improving the Work but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as Not a Contribution Contributor shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work 2 Grant of Copyright License Subject to the terms and conditions of this License each Contributor hereby grants to You a perpetual worldwide non exclusive no charge royalty free irrevocable copyright license to reproduce prepare Derivative Works of publicly display publicly perform sublicense and distribute the Work and such Derivative Works in Source or Object form 3 Grant of Patent License Subject to the terms and conditions of this License each Contributor hereby grants to You a perpetual worldwide non exclusive no charge royalty free irrevocable except as stated in this section patent license to make have made use offer to sell sell import and otherwise transfer the Work where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution s alone or by combination of their Contribution s with the Work to which such Contribution s was submitted If You institute patent litigation against any entity including a cross claim or counterclaim in a lawsuit alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed 4 Redistribution You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium with or without modifications and in Source or Object form provided that You meet the following conditions a You must give any other recipients of the Work or Derivative Works a copy of this License and b You must cause any modified files to carry prominent notices stating that You changed the files and c You must retain in the Source form of any Derivative Works that You distribute all copyright patent trademark and attribution notices from the Source form of the Work excluding those notices that do not pertain to any part of the Derivative Works and d If the Work includes a NOTICE text file as part of its distribution then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file excluding those notices that do not pertain to any part of the Derivative Works in at least one of the following places within a NOTICE text file distributed as part of the Derivative Works within the Source form or documentation if provided along with the Derivative Works or within a display generated by the Derivative Works if and wherever such third party notices normally appear The contents of the NOTICE file are for informational purposes only and do not modify the License You may add Your own attribution notices within Derivative Works that You distribute alongside or as an addendum to the NOTICE text from the Work provided that such additional attribution notices cannot be construed as modifying the License You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use reproduction or distribution of Your modifications or for any such Derivative Works as a whole provided Your use reproduction and distribution of the Work otherwise complies with the conditions stated in this License 5 Submission of Contributions Unless You explicitly state otherwise any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License without any additional terms or conditions Notwithstanding the above nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions 6 Trademarks This License does not grant permission to use the trade names trademarks service marks or product names of the Licensor except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file 7 Disclaimer of Warranty Unless required by applicable law or agreed to in writing Licensor provides the Work and each Contributor provides its Contributions on an AS IS BASIS WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND either express or implied including without limitation any warranties or conditions of TITLE NON INFRINGEMENT MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License 8 Limitation of Liability In no event and under no legal theory whether in tort including negligence contract or otherwise unless required by applicable law such as deliberate and grossly negligent acts or agreed to in writing shall any Contributor be liable to You for damages including any direct indirect special incidental or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work including but not limited to damages for loss of goodwill work stoppage computer failure or malfunction or any and all other commercial damages or losses even if such Contributor has been advised of the possibility of such damages 9 Accepting Warranty or Additional Liability While redistributing the Work or Derivative Works thereof You may choose to offer and charge a fee for acceptance of support warranty indemnity or other liability obligations and or rights consistent with this License However in accepting such obligations You may act only on Your own behalf and on Your sole responsibility not on behalf of any other Contributor and only if You agree to indemnify defend and hold each Contributor harmless for any liability incurred by or claims asserted against such Contributor by reason of your accepting any such warranty or additional liability END OF TERMS AND CONDITIONS APPENDIX How to apply the Apache License to your work To apply the Apache License to your work attach the following boilerplate notice with the fields enclosed by brackets replaced with your own identifying information Don t include the brackets The text should be enclosed in the appropriate comment syntax for the file format We also recommend that a file or class name and description of purpose be included on the same printed page as the copyright notice for easier identification within third party archives Copyright yyyy name of copyright owner Licensed under the Apache License Version 2 0 the License you may not use this file except in compliance with the License You may obtain a copy of the License at http www apache org licenses LICENSE 2 0 Unless required by applicable law or agreed to in writing software distributed under the License is distributed on an AS IS BASIS WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND either express or implied See the License for the specific language governing permissions and limitations under the License Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Project License');
titles.add("license.html", "Domain Driven Design - Project License");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'plugin-management.html');
d.add("text", "Domain Driven Design Project Plugin Management Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices FAQ Glossary Project Plugin Management GroupId ArtifactId Version com googlecode maven java formatter plugin maven java formatter plugin 0 4 com mycila maven license plugin maven license plugin 1 9 0 org apache maven plugins maven antrun plugin 1 3 org apache maven plugins maven assembly plugin 2 2 beta 5 org apache maven plugins maven compiler plugin 3 1 org apache maven plugins maven dependency plugin 2 8 org apache maven plugins maven javadoc plugin 2 9 1 org apache maven plugins maven release plugin 2 3 2 org codehaus mojo aspectj maven plugin 1 5 org codehaus mojo cobertura maven plugin 2 6 Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Project Plugin Management');
titles.add("plugin-management.html", "Domain Driven Design - Project Plugin Management");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'plugins.html');
d.add("text", "Domain Driven Design Project Build Plugins Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices FAQ Glossary Project Build Plugins GroupId ArtifactId Version com github github site maven plugin 0 11 com googlecode maven java formatter plugin maven java formatter plugin 0 4 com mycila maven license plugin maven license plugin 1 9 0 external atlassian jgitflow jgitflow maven plugin 1 0 m4 3 org apache maven plugins maven clean plugin 2 5 org apache maven plugins maven compiler plugin 3 1 org apache maven plugins maven deploy plugin 2 7 org apache maven plugins maven enforcer plugin 1 3 1 org apache maven plugins maven install plugin 2 4 org apache maven plugins maven jar plugin 2 4 org apache maven plugins maven pdf plugin 1 3 org apache maven plugins maven resources plugin 2 6 org apache maven plugins maven site plugin 3 3 org apache maven plugins maven surefire plugin 2 12 4 org codehaus mojo aspectj maven plugin 1 5 org sonatype plugins nexus staging maven plugin 1 6 5 org uniknow maven plugins index 0 1 9 SNAPSHOT Project Report Plugins There are no plugins reports defined in the Reporting part of this project Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Project Build Plugins');
titles.add("plugins.html", "Domain Driven Design - Project Build Plugins");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'team-list.html');
d.add("text", "Domain Driven Design Project Team Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices FAQ Glossary The Team A successful project requires many people to play many roles Some members write code or documentation while others are valuable as testers submitting patches and suggestions The team is comprised of Members and Contributors Members have direct access to the source of a project and actively evolve the code base Contributors improve the project through submission of patches and suggestions to the Members The number of Contributors to the project is unbounded Get involved today All contributions to the project are greatly appreciated Members The following is a list of developers with commit privileges that have directly contributed to the project in one way or another Id Name Organization Roles Time Zone mase Mark Schenk UniKnow architect developer Europe Amsterdam Contributors There are no contributors listed for this project Please check back again later Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Project Team');
titles.add("team-list.html", "Domain Driven Design - Project Team");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'source-repository.html');
d.add("text", "Domain Driven Design Source Repository Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices FAQ Glossary Overview This project uses Git to manage its source code Instructions on Git use can be found at http git scm com documentation Web Browser Access The following is a link to a browsable version of the source repository https github com UniKnow AgileDev parent ddd Anonymous Access The source can be checked out anonymously from Git with this command See http git scm com docs git clone git clone git github com uniKnow AgileDev git Developer Access Only project developers can access the Git tree via this method See http git scm com docs git clone git clone git@github com uniKnow AgileDev git Access from Behind a Firewall Refer to the documentation of the SCM used for more information about access behind a firewall Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Source Repository');
titles.add("source-repository.html", "Domain Driven Design - Source Repository");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'project-summary.html');
d.add("text", "Domain Driven Design Project Summary Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices FAQ Glossary Project Summary Project Information Field Value Name Tutorial Domain Driven Design Description The following tutorial describes best practices for applying Domain Driven Design Homepage https github com UniKnow AgileDev parent ddd Project Organization Field Value Name UniKnow URL http www uniknow org Build Information Field Value GroupId org uniknow agiledev tutorials ArtifactId ddd Version 0 1 9 SNAPSHOT Type jar Java Version 1 7 Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Project Summary');
titles.add("project-summary.html", "Domain Driven Design - Project Summary");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'project-info.html');
d.add("text", "Domain Driven Design Project Information Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices FAQ Glossary Project Information This document provides an overview of the various documents and links that are part of this project s general information All of this content is automatically generated by Maven on behalf of the project Overview Document Description Dependencies This document lists the project s dependencies and provides information on each dependency Dependency Convergence This document presents the convergence of dependency versions across the entire project and its sub modules Dependency Information This document describes how to to include this project as a dependency using various dependency management tools Dependency Management This document lists the dependencies that are defined through dependencyManagement Distribution Management This document provides informations on the distribution management of this project About The following tutorial describes best practices for applying Domain Driven Design Project License This document lists the project license s Plugin Management This document lists the plugins that are defined through pluginManagement Project Plugins This document lists the build plugins and the report plugins used by this project Project Team This document provides information on the members of this project These are the individuals who have contributed to the project in one form or another Source Repository This document lists ways to access the online source repository Project Summary This document lists other related information of this project Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Project Information');
titles.add("project-info.html", "Domain Driven Design - Project Information");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'core/aggregates.html');
d.add("text", "Domain Driven Design Aggregates Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Aggregates Entities Factories Layered Architecture Modules Repositories Services Value Objects Best practices FAQ Glossary Aggregates It is difficult to guarantee the consistency of changes to objects in a model with complex associations Invariants need to be maintained that apply to closely related groups of objects not just discrete objects Yet cautious locking schemes cause multiple users to interfere pointlessly with each other and make a system unusable Therefore cluster the Entities and Value Objects into Aggregates and define boundaries around each Choose one Entity to be the root of each Aggregate and control all access to the object inside the boundary through the root Allow external objects to hold references to the root only Transient references to internal members can be passed out for use within a single operation only Because the root controls access it cannot be blindsided by changes to the internals This arrangement makes it practical to enforce all invariants for objects in the Aggregate and for the Aggregate as a whole in any state change Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Aggregates.');
titles.add("core/aggregates.html", "Domain Driven Design - Aggregates.");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'core/assertions.html');
d.add("text", "Domain Driven Design Assertions Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices Assertions Intention revealing interfaces Side effect free functions FAQ Glossary Assertions Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Assertions');
titles.add("core/assertions.html", "Domain Driven Design - Assertions");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'core/best_practices.html');
d.add("text", "Domain Driven Design Best Practices Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices Assertions Intention revealing interfaces Side effect free functions FAQ Glossary Best Practices Prefer executable specifications over static documents The majority of the information captured in traditional specification documents such as requirements specification architecture specifications or design specifications can be captured as “executable specifications” in the form of tests When you take a Test Driven Development TDD approach you effectively write detailed specifications on a just in time JIT basis With TDD you write a test either at the customer acceptance level or the developer level before writing sufficient functionality to fulfill that test The tests are used for two purposes they specify the requirements architecture design and they validate your work Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Best Practices');
titles.add("core/best_practices.html", "Domain Driven Design - Best Practices");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'core/bounded_context.html');
d.add("text", "Domain Driven Design Bounded context Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices FAQ Glossary Bounded context DDD deals with large models by dividing them into different Bounded Contexts and being explicit about their interrelationships DDD is about designing software based on models of the underlying domain A model acts as a Ubiquitous Language to help communication between software developers and domain experts It also acts as the conceptual foundation for the design of the software itself e g how it’s broken down into objects or functions As you try to model a larger domain it gets progressively harder to build a single unified model Different groups of people will use subtly different vocabularies in different part of large organizations So instead of creating a unified model of the entire business DDD divides a large system into bounded contexts which each can have a unified model Bounded contexts have both unrelated and shared concepts Different contexts may have completely different models of common concepts with mechanisms to map between these concepts for integration Bounded contexts communicate between each other via their public APIs This could involve subscribing to events comming from another bounded context or one bounded context could act like a regular client of another sending commands and queries Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Bounded context');
titles.add("core/bounded_context.html", "Domain Driven Design - Bounded context");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'core/building_blocks_ddd.html');
d.add("text", "Domain Driven Design Building blocks Domain Driven Design Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Aggregates Entities Factories Layered Architecture Modules Repositories Services Value Objects Best practices FAQ Glossary Building blocks Domain Driven Design The diagram below is a navigational map It shows the patterns that form the building blocks of Domain Driven Design and how they relate to each other By using these standard patterns we bring order in the design and make it easier for team members to understand each other’s work Using standard patterns also adds to the ubiquitous language which all team members can use to discuss model and design discussions Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Building blocks Domain Driven Design');
titles.add("core/building_blocks_ddd.html", "Domain Driven Design - Building blocks Domain Driven Design");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'core/data_transfer_object.html');
d.add("text", "Domain Driven Design Data Transfer Object Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices FAQ Glossary Data Transfer Object To have a good encapsulation of the domain entities and related business logic DDD suggests not to expose the setters of the domain entity to the client Instead the client can only change the domain entities through business methods defined on the application service domain entity Therefore Create a Data Transfer Object DTO for those domain entities that are exposed to the client Conversion between DTO and domain model will happen in the application layer Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Data Transfer Object');
titles.add("core/data_transfer_object.html", "Domain Driven Design - Data Transfer Object");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'core/entities.html');
d.add("text", "Domain Driven Design Entities Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Aggregates Entities Factories Layered Architecture Modules Repositories Services Value Objects Best practices FAQ Glossary Entities Many object are not fundamentally defined by their attributes but rather by a thread of continuity and identity Some objects are not defined primarily by their attributes They represent a thread of identity that runs through time and often across distinct representations Sometimes such an object must be matched with another object even though attributes differ Mistaken identity can lead to data corruption Therefore when an object is distinguished by its identity rather than its attributes make this primary to its definition in the model Keep the class definition simple and focused on life cycle continuity and identity Define a means of distinguishing each object regardless of its form or history Be alert to requirements that call for matching objects by attributes Define an operation that is guarenteed to produce a unique identity for each object The model must define what it means to be the same thing Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Entities');
titles.add("core/entities.html", "Domain Driven Design - Entities");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'core/factories.html');
d.add("text", "Domain Driven Design Factories Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Aggregates Entities Factories Layered Architecture Modules Repositories Services Value Objects Best practices FAQ Glossary Factories When creation of an object or an entire Aggregate becomes complicated or reveals too much of the internal structure Factories provide encapsulation Creation of an object can be a major operation in itself but complex assembly operations do not fit the responsibility of the created object Combining such responsibilities can produce ungainly designs that are hard to understand Making the client direct construction muddies the design of the client breaches encapsulation of the assembled object or Aggregate and overly couples the client to the implementation of the created object Therefore shift the responsibility for creating instances of complex objects and Aggregates to a separate object which may itself have no responsibility in the domain model but is still part of the domain design Provide an interface that encapsulates all complex assembly and that does not require the client to reference the concrete classes of the object being instantiated Create entire Aggregates as a piece enforcing their invariants Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Factories');
titles.add("core/factories.html", "Domain Driven Design - Factories");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'core/faq.html');
d.add("text", "Domain Driven Design FAQ Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices FAQ Glossary FAQ What is Domain Driven Design It is a development approach that deeply values the domain model and connects it to the implementation What is a ubiquitous language A set of terms used by all people involved in the domain domain model implementation and backends The idea is to avoid translation because that blunts communication and makes knowledge crunching anemic Investing in ubiquitos language pays off in that it makes communication clearer and allows teams to see more opportunities What is a bounded context A division of a larger system that has its own ubiquitous language and domain model As with other As with other DDD concepts bounded contexts are most valuable when carried through into the implementation How can I communicate between bounded contexts Exclusively in terms of their public API This could involve subscribing to events coming from another bounded context and or one bounded context could act like a regular client of another bounded context sending command and queries What is an event An event represents something that took place in the domain They are always named with a past particle verb such as DeviceRegistered It’s not unusual but not required for an event to name an aggregate or entity to which it is related to Since an event represents something in the past it can be considered as statement of fact and used to take decisions in other parts of the system What is an command Changes to the domain are requested by sending commands They are named with a verb in the imperative mood and may include the aggregate entity to which it is related for example RegisterDevice Unlike a event a command is not a statement of fact it’s only a request and thus may be refused a typical way to convey refusal is to throw an exception Why are commands and events immutable For the purpose of this question immutability is not having any setters or other methods which change the internal state Commands are immutable because they are sent directly to the domain model side for processing They do need to change during their projected lifetime from client to server Events are immutable because they represent domain actions that took place in the past What is CQRS CQRS means “Command Query Responsibility Segregation” and like the name states the responsibility between commands write requests and queries read requests is segregated e g the write and read requests are handled by different objects We can further split up the data storage having separate write read stores Though separating read write stores is often discussed in relation with CQRS this is not CQRS itself CQRS is just the first split of commands and queries Should I use push or pull when publishing events Push has the advantage that events can be published as they happen Pull has the advantage that read sides can be more active and independent Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - FAQ');
titles.add("core/faq.html", "Domain Driven Design - FAQ");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'core/glossary.html');
d.add("text", "Domain Driven Design Glossary Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices FAQ Glossary Glossary A Aggregate A cluster of associated objects that are treated as a unit for the purpose of data changes External references are restricted to one member of the Aggregate designated as the root A set of consistency rules applies within the Aggregate’s boundaries Analysis pattern A group of concepts that represents a common construction in business modeling It may be relevant to only 1 domain or may span many domains resource fowler 1997 p 8 Application Service Used by external consumers to talk to your system think Web Services If consumers need access to CRUD operations they would be exposed via a application service Application Services will typically use both Domain Services and Repositories to deal with external requests Assertion A statement of the correct state of a program at some point independent of how it does it Typically a Assertion specifies the result of an operation or the required input for and operation B Bounded Context A division of a larger system that has its own ubiquitous language and domain model Bounding contexts gives team members a clear and shared understanding of what has to be consistent and what can be developed independently C Client A program element that is calling the element under design using its capabilities Cohesion Logical agreement and dependence Command An operation that causes some change to the system for example setting a variable Context The setting in which a word or statement appears that determines its meaning Context Map A representation of the Bounded Contexts involved in a project and the actual relationships between them and their models Core Domain The distinctive part of the model central to the user’s goals that differentiates the application and makes it valuable D Data Transfer Object A Data Transfer Object DTO is a data container which is used to transport data between layers and tiers It mainly contains of attributes DTOs are anemic in general and do not contain any business logic DDD See Domain Driven Design Declarative Design A form of programming in which a precise description of properties actually controls the software Domain Driven Design Domain Driven Design is not a technology or a methodology DDD provides a structure of practices and terminology for making design decissions that focus and accelerate software projects dealing with complicated domains Domain Service Encapsulates business logic that doesn’t naturally fit within a domain object and are NOT typical CRUD operations those would belong to a Repository DTO See Data Transfer Object E Entities Entities are characterized by having an identity that’s not tied to their attribute values All attributes in an entity can change and it’s still the same entity Conversely two entities might be equivalent in all their attributes but will still be distinct Event An event represents something that took place in the domain Since an event represents something in the past it can be considered as a fact and used to take decisions in other parts of the system I Infrastructure Services Used to abstract technical concerns e g MSMQ email provider etc M Model A useful approximation to the problem at hand Modifier See Command S Saga In essence sagas listen for events and dispatch commands A saga spans more than one messages and manages a process U Ubiquitous Language A language structured around the domain model and used by all team members to connect all activities of the team with the software The idea is to avoid translations because they blunt communication and makes knowledge crunching anemic V Value Object Value objects have no seperate identity they are defined solely by their attribute values Though we are typically talking of objects when referring to value types native types are actually a good example of value types It is common to make value types immutable Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Glossary');
titles.add("core/glossary.html", "Domain Driven Design - Glossary");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'core/intention_revealing_interfaces.html');
d.add("text", "Domain Driven Design Intention Revealing Interfaces Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices Assertions Intention revealing interfaces Side effect free functions FAQ Glossary Intention Revealing Interfaces If a developer must consider the implementation of a component in order to use it the value of ancapsulation is lost If someone other that the original developer must infer the purpose of an object or operation based on its implementation that new developer may infer a purpose that the operation or class fulfills only by change If that was not the intent the code may work for that moment but the conceptual basis of the design will have been corrupted and the 2 developers will be working at cross purpose Therefore name classes and operations to describe their effect and purpose without reference to the means by which they do what they promise This relieves the client developer of the need to understand the internals These names should conform to the ubiquitous language so that team members can quickly infer their meaning Write a test for a behavior before creating it to force your thinking into client developer mode Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Intention Revealing Interfaces.');
titles.add("core/intention_revealing_interfaces.html", "Domain Driven Design - Intention Revealing Interfaces.");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'core/introduction_ddd.html');
d.add("text", "Domain Driven Design Introduction Domain Driven Design Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices FAQ Glossary Introduction Domain Driven Design The philosophy of Domain Driven Design DDD firstly described by Eric Evans is about placing our attention at the heart of the application focusing on the complexity that is intrinsic to the business domain itself Domain Driven Design consists of a set of patterns for building enterprise applications based on the domain model Within this introduction we are going to run through some of the main patterns of DDD Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Introduction Domain Driven Design.');
titles.add("core/introduction_ddd.html", "Domain Driven Design - Introduction Domain Driven Design.");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'core/layered_architecture.html');
d.add("text", "Domain Driven Design Layered Architecture Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Aggregates Entities Factories Layered Architecture Modules Repositories Services Value Objects Best practices FAQ Glossary Layered Architecture In an object oriented program UI database and other support code often gets written directly into the business objects Additional business logic is embedded in the behavior of UI widgets and database scripts This happens because it is the easiest way to make things work in the short run When the domain related code is diffused through such a large amount of other code it becomes extremely difficult to see and reason about Superficial changes to the UI can actually change business logic To change a business rule may require meticulous tracing of UI code database code or other programming elements Implementing coherent model driven objects impractical and automated testing is awkward With all the technologies and logic involved in each activity a program must be very simple or it becomes impossible to understand Therefore Partition a complex program into ’layer’s Develop a design within each ‘layer’ that is cohesive and that depends only on the layers below Follow standard architectural patterns to provide loose coupling to the layers above by means of a mechanism such as Observer or Mediator there is never a direct reference from lower to higher Concentrate all the code related to the domain model in one layer and isolate it from the user interface application and infrastructure code The domain objects free of the responsibility of displaying themselves storing themselves managing application tasks and so forth can be focused on expressing the domain model This allows a model to evolve to be rich and clear enough to capture essential business knowledge and put it to work A typical enterprise application architecture consists of the following four conceptual layers Presentation Layer Responsible for presenting information to the user and interpreting user commands Application Layer Layer that coordinates the application activity It doesn’t contain any business logic It does not hold the state of business objects but it can hold the state of an application task’s progress Domain Layer This layer contains information about the business domain The state of business objects is held here Persistence of the business objects and possibly their state is delegated to the infrastructure layer Infrastructure Layer This layer acts as a supporting library for all the other layers It implements persistence for business objects contains supporting libraries etc Application layer The application layer Is responsible for the navigation between the UI screens in the bounded context as well as the interaction with application layers of other bounded contexts Can perform the basic non business related validation on the user input data before transmitting it to the other lower layers of the application Doesn’t contain any business or domain related logic Doesn’t have any state reflecting a business use case but it can manage the state of the user session or the progress of a task Contains application services Domain layer The domain layer Is responsible for the concepts of business domain and the business rules Entities encapsulate the state and behavior of the business domain Manages the state of a business use case if the use case spans multiple user requests e g loan registration process which consists of multiple steps user entering loan details system returning products and rates user selecting particular product system locking the loan for selected rate Contains domain services Is the heart of the bounded context and should be well isolated from the other layers Also it should not be dependent on the application frameworks used in the other layers Hibernate Spring etc CRUD operations TODO see Domain Driven Design DDD architecture layer design for CRUD operation Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Layered Architecture');
titles.add("core/layered_architecture.html", "Domain Driven Design - Layered Architecture");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'core/modules.html');
d.add("text", "Domain Driven Design Modules Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Aggregates Entities Factories Layered Architecture Modules Repositories Services Value Objects Best practices FAQ Glossary Modules Everyone uses Modules but few treat them as full fledged part of the model Code gets broken down into all sort of categories from aspects of the technical architecture to developers work assignments It is a truism that there should be low coupling between Modules and high cohesion within them Explanations of coupling and cohesion tend to make them sound like technical metrics to be judged mechanically based on the distributions of associations and interactions Yet it isn’t just code being divided into Modules but concepts There is a limit to how many things a person can think about at once hence low coupling Therefore choose Modules that tell the story of the system and contain a cohesive set of concepts Seek low coupling in the sense of concepts that can be understood and reasoned about independently of each other Refine the model until it partitions according to the high level domain concepts and the corresponding code is decoupled as well Give the Modules names that become part of the ubiquitous language Modules and their names should refelect insight into the domain Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Modules');
titles.add("core/modules.html", "Domain Driven Design - Modules");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'core/repositories.html');
d.add("text", "Domain Driven Design Repositories Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Aggregates Entities Factories Layered Architecture Modules Repositories Services Value Objects Best practices FAQ Glossary Repositories A client needs a practical means of acquiring references to preexisting domain objects If the infrastructure makes it easy to do so the developer of the client may add more traversable associations muddling the model On the other hand they may use queries to pull the exact data they need from the database or to pull a few objects rather than navigating from the ‘Aggregate’ roots Domain logic moves into queries and client code and the Entities and Value Objects become mere data containers The sheer technical complexity of applying most database access infrastructure quickly swamps the client code which leads developers to dumb down the domain layer which makes the model irrelevant Therefore for each type of object that needs global access create an object that can provide the illusion of an in memory collection of all objects of that type Setup access through a well known global interface Provide methods to add and remove objects which will encapsulate the actual insertion and removal of data in the store Provide methods that select objects based on some criteria and return fully instantiated objects of object whose attribute values meet the criteria thereby encapsulating the actual storage and query technology Keep the client focused on the model delegating all object storage and access to the Repositories Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Repositories.');
titles.add("core/repositories.html", "Domain Driven Design - Repositories.");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'core/services.html');
d.add("text", "Domain Driven Design Services Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Aggregates Entities Factories Layered Architecture Modules Repositories Services Value Objects Best practices FAQ Glossary Services Some concepts from the domain aren’t natural to model as objects Forcing the required domain functionality to be the responsibility of an Entity or Value Object either distorts the definition of a model based object or adds meaningless artificial objecs Therefore when a significant process or transformation in the domain is not a natural responsibility of an Entity or Value Object add an operation to the model as a standalone interface declared as a Service Define the interface in terms of the language of the model and make sure the operation name is part of the ubiquitous language Make the service stateless Service types Services exist in most layers of the DDD layered architecture Application Domain Infrastructure An infrastructure service would be something that communicates directly with external resources such as file systems databases etc Domain services are the coordinators allowing higher level functionality between many different smaller parts Since domain services are first class citizens of the domain model their names and usage should be part of the ubiquitous language Meanings and responsibilities should make sense to the stakeholders or domain experts The application service will be acting as façade and accepts any request from clients Once the request comes based on the operation it may call a Factory to create domain object or calls repository service to re create existing domain objects Conversion between DTO Data Transfer Object to domain objects and Domain objects to DTO will be happening here Application service can also call another application service to perform additional operations The differences between a domain service and an application service are subtle but critical Domain services are very granular where as application services are a facade with as purpose providing an API Domain services contain domain logic that can’t naturally be placed in an entity or value object whereas application services orchestrate the execution of domain logic and don’t themselves implement any domain logic Domain service methods can have other domain elements as operands and return values whereas application services operate upon trivial operands such as identity Application services declare dependencies on infrastructural services required to execute domain logic Command handlers are a flavor of application services which focus on handling a single command typically in a CQRS architecture Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Services.');
titles.add("core/services.html", "Domain Driven Design - Services.");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'core/side_effect_free_functions.html');
d.add("text", "Domain Driven Design Side effect free functions Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Best practices Assertions Intention revealing interfaces Side effect free functions FAQ Glossary Side effect free functions Interactions of multiple rules or compositions of calculations become extremely difficult to predict The developer calling an operation must understand its implementation and the implementation of all its delegations in order to anticipate the result The usefulness of any abstraction of interfaces is limited if the developers are forced to pierce the veil Therefore place as much as possible of the program into functions operations that return results with no observable side effects Strictly segregate method which result in modifications to observable state into very simple operations that do not return domain information Further control side effects by moving complex logic into Value Objects when a concept fitting the responsibility present itself Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Side effect free functions.');
titles.add("core/side_effect_free_functions.html", "Domain Driven Design - Side effect free functions.");
index.addDocument(d);

var d = new LADDERS.search.document();
d.add("id", 'core/value_objects.html');
d.add("text", "Domain Driven Design Value Objects Tutorial Domain Driven Design Last Published 2015 05 05 Version 0 1 9 SNAPSHOT Core Introduction DDD Building blocks DDD Aggregates Entities Factories Layered Architecture Modules Repositories Services Value Objects Best practices FAQ Glossary Value Objects Many objects have no conceptual identity These objects describe some characteristic of a thing Tracking the identity of Entities is essential but attaching identity to other objects can hurt system performance add analytical work and muddle the model by making all object look the same Software design is a constant battle with complexity We must make distinctions so that special handling is applied only where necessary However if we think of this category of objects as just the absence of identity we haven’t dded much to our toolbox or vocabulary In fact these objects have characteristics of their own and their own significance to the model These are the objects that describe things Therefore when you care only about the attributes of an element of the model classify it as a Value Object Make it express the meaning of the attributes it conveys and give it related functionality Treat the Value Object as immutable Don’t give it any identity and avoid the design complexities necessary to maintain Entities Copyright 2015 UniKnow All Rights Reserved ");
d.add("title", 'Domain Driven Design - Value Objects');
titles.add("core/value_objects.html", "Domain Driven Design - Value Objects");
index.addDocument(d);

